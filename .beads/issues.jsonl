{"id":"mtg-1","title":"Overall MTG Forge Rust development tracking","description":"This is the main tracking issue for MTG Forge Rust development.\n\n**Major tracking issues (priority 1):**\n- mtg-63: Optimization and performance tracking\n- mtg-68: MTG feature completeness (keywords, abilities, effects)\n- mtg-69: Gameplay features (TUI, human play, controls)\n- mtg-70: Cross-cutting codebase issues (APIs, testing, architecture)\n- vc-1: Heuristic AI completeness tracking\n\n**Current status as of commit#162(387498cecf):**\n- Tests: 188 passing (165 lib + 10 card_loading + 4 determinism + 7 tui + 2 undo)\n- Examples: 13/13 passing\n- Performance: ~4,694 games/sec, ~338k actions/sec\n- Cards: 31k+ supported from cardsfolder\n\n**Conventions:**\n- Tracking issues (priority 1) reference granular issues\n- Granular issues have priority 3-4 unless critical bugs (priority 2)\n- Human-created issues have priority 0\n- Reference issues in code: // TODO(mtg-N): description\n- Transient info includes timestamp: commit#N(hash)","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-26T11:17:19.039749994Z"}
{"id":"mtg-10","title":"Vec reallocations in game loop","description":"Many small Vec allocations for temporary collections:\n- game_loop.rs:418 (player_ids collection)\n- combat.rs:90,95 (attackers/blockers lists)\n\nReturn iterators instead of Vec where possible.","notes":"Completed in commit 0d6cdb50. Replaced player_ids Vec with fixed array and cards_to_untap Vec with SmallVec. Combat allocations already addressed in 60d257e1.","status":"closed","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-23T10:11:38.184009579Z"}
{"id":"mtg-11","title":"Zone transfer operations optimization","description":"Potential temporary allocations during card movement between zones (hand→battlefield→graveyard).","status":"open","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-12","title":"Mana pool calculation optimization","description":"Review ManaEngine operations for unnecessary cloning of mana costs.\nSeen in game_loop.rs:106,277 (mana_cost.clone()).","status":"open","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-13","title":"Arena allocation for per-turn temporaries","description":"Use arena allocators (bumpalo or typed-arena) for per-turn allocations.\nBenefits: faster allocation (pointer increment), bulk deallocation, better cache locality.","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-14","title":"Object pools for reusable objects","description":"Pre-allocate pools for frequently created/destroyed objects:\n- Token pools\n- Effect pools  \n- Combat calculation buffers","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-15","title":"Compile-time feature flags for profiling modes","description":"Feature flags for different optimization profiles:\n- zero-copy-strict: Enforce at compile time\n- undo-logging: Enable/disable undo log overhead\n- debug-allocations: Track allocation sites for profiling","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-16","title":"Aura enchantments (need enchant targeting)","description":"Implement Aura enchantments that attach to other permanents.\nRequires:\n- Enchant keyword parsing\n- Target selection for auras\n- Attachment state tracking\n- Rules for aura falling off when target becomes illegal","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-17","title":"Equipment artifacts (need equip abilities)","description":"Implement Equipment artifacts with equip abilities.\nRequires:\n- Equip keyword and cost parsing\n- Attachment to creatures\n- Equipment granting abilities to equipped creature\n- Unequipping when creature leaves battlefield","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-18","title":"Planeswalker cards (lower priority)","description":"Implement Planeswalker card type.\nRequires:\n- Loyalty counters\n- Loyalty abilities (+N, -N, -X)\n- Planeswalker uniqueness rule\n- Combat damage redirection\n- Can be attacked by creatures","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-19","title":"Advanced activated abilities","description":"Extend activated ability system beyond basic tap/mana costs:\n- Complex costs (sacrifice, discard, exile)\n- Stack interaction and instant-speed timing\n- Timing restrictions (sorcery-speed only, etc.)\n- Player choice for \"Any\" or \"Combo\" mana production\n- Multiple cost types in single ability","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-2","title":"Optimization and performance tracking","description":"Track performance optimization work for MTG Forge Rust.\n\n**Current performance as of commit#162(387498cecf):**\n- Games/sec: ~4,694 (seed 42, fresh mode)\n- Actions/sec: ~338,000\n- Turns/sec: ~413,000\n- Actions/turn: 0.82\n- Avg allocations/turn: 25,890 bytes\n- Avg duration/game: 213.03µs\n\n**High priority optimization issues:**\n- mtg-6: Logging allocations (#1 hotspot - 70%+ of allocations)\n- mtg-7: CardDatabase.get_card() should return references\n- mtg-8: Eliminate GameStateView clones\n- mtg-9: String allocation optimization\n\n**Medium priority:**\n- mtg-10: Vec reallocations in game loop\n- mtg-11: Zone transfer operations optimization\n- mtg-12: Mana pool calculation optimization\n\n**Future considerations:**\n- mtg-13: Arena allocation for per-turn temporaries\n- mtg-14: Object pools for reusable objects\n- mtg-15: Compile-time feature flags for profiling modes\n\nSee OPTIMIZATION.md for detailed analysis and profiling methodology.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-20","title":"Static abilities (S:) - continuous effects","description":"Implement static abilities that provide continuous effects.\nExamples:\n- Lords that boost other creatures (+1/+1 to all Elves)\n- Abilities granted to other permanents\n- Cost modifications\n- Rule modifications (creatures can't block, etc.)\n\nRequires layer system for dependency ordering.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-21","title":"SVar resolution (DB$ sub-abilities)","description":"Implement SVar (Script Variable) resolution for DB$ sub-abilities.\nSVars allow card scripts to define reusable sub-abilities and parameters.\n\nExample from Lightning Bolt:\nSVar:DBDamage:DB$ DealDamage | NumDmg$ 3 | ValidTgts$ Creature,Player\n\nRequires parser for SVar definitions and resolution mechanism.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-22","title":"Target validation (legal targets)","description":"Implement proper target validation:\n- Check if target is legal based on ValidTgts$ parameter\n- Verify target hasn't been hexproof/shroud protected\n- Handle \"target creature or player\" vs \"target creature\" distinctions\n- Protection from color/type checking","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-23","title":"Target selection by controllers","description":"Allow controllers to select targets for spells and abilities.\n- Add choose_targets() method to PlayerController trait\n- Handle \"any target\", creature-only, player-only target modes\n- Support multiple targets (e.g., Forked Lightning)\n- Handle optional vs required targets","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-25T00:40:39.211635519Z"}
{"id":"mtg-24","title":"\"Any target\" vs creature-only vs player-only targeting","description":"Properly distinguish between target types:\n- ValidTgts$Creature,Player (any target - can hit creatures or players)\n- ValidTgts$Creature (creature-only)\n- ValidTgts$Player (player-only)\n- ValidTgts$Permanent (any permanent)\n\nUpdate spell effects to respect these distinctions.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-25","title":"Interactive TUI controller (--p1=tui) for human play","description":"Implement interactive TUI controller allowing human players to make decisions.\n- Read input from stdin for choices\n- Display available actions\n- Handle complex decision trees\n- Graceful error handling for invalid inputs","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-26","title":"Display game state during play (life, hand, battlefield)","description":"Show current game state in TUI:\n- Player life totals\n- Hand size (and cards for human player)\n- Battlefield permanents with stats\n- Graveyards\n- Exile zones","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-27","title":"Show available actions to player","description":"Display what actions the player can take:\n- Playable lands\n- Castable spells (with mana available)\n- Activatable abilities\n- Combat actions (attackers, blockers)\n- Pass priority/end turn options","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-28","title":"Better formatting and colors in output","description":"Improve TUI visual presentation:\n- Color-code mana symbols\n- Highlight important game events\n- Use box drawing for battlefield\n- Color player names differently\n- Use ANSI codes for rich formatting","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-29","title":"Game state visualization improvements","description":"Enhanced visualization:\n- ASCII art for card layout\n- Compact vs detailed view modes\n- Show tapped/untapped state clearly\n- Display counters and modifications\n- Stack visualization during spell resolution","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-3","title":"MTG feature completeness: keywords, abilities, effects","description":"Track implementation of Magic: The Gathering game mechanics.\n\n**Card types:**\n- Creature cards: ✅ Complete (combat, summoning sickness, keywords)\n- Enchantment cards: ✅ Basic support (cast, enters battlefield)\n- Artifact cards: ✅ Basic support (cast, enters battlefield)\n- mtg-16: Aura enchantments (need enchant targeting)\n- mtg-17: Equipment artifacts (need equip abilities)\n- mtg-18: Planeswalker cards (lower priority)\n\n**Ability system (see ai_docs/CARD_SCRIPT_SPEC.md):**\n- Keywords (K:): ✅ 16+ keywords implemented\n- Spell effects (A:SP$): ✅ DealDamage, Draw, Destroy, GainLife, Pump, Tap, Untap, Mill, Counter\n- Activated abilities (A:AB$): ✅ Basic execution with tap/mana costs\n- Mana abilities: ✅ AB$ Mana production\n- mtg-19: Advanced activated abilities (complex costs, stack interaction, player choice for \"Any\"/\"Combo\" mana)\n- Triggered abilities (T:): ✅ ETB triggers with multiple effect types\n- mtg-20: Static abilities (S:) - continuous effects\n- mtg-21: SVar resolution (DB$ sub-abilities)\n\n**Targeting:**\n- mtg-22: Target validation (legal targets)\n- mtg-23: Target selection by controllers\n- mtg-24: \"Any target\" vs creature-only vs player-only\n\n**AI (see vc-1 for detailed tracking):**\n- ✅ HeuristicController with creature evaluation\n- ✅ Combat decisions (attack/block)\n- vc-1: Complete heuristic AI port from Java Forge","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-26T11:17:19.043299332Z"}
{"id":"mtg-30","title":"Stack interaction (responding to spells at instant speed)","description":"Full instant-speed interaction:\n- Priority passing after each spell/ability\n- Allow instant-speed responses\n- Proper stack resolution (LIFO)\n- Handle nested priority rounds\nCurrently implemented for Counterspell, needs generalization.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-31","title":"Card draw triggers and replacement effects","description":"Implement triggered abilities and replacement effects for card draw:\n- Draw triggers (e.g., Consecrated Sphinx draws when opponent draws)\n- Replacement effects (Thought Reflection doubles draws)\n- Dredge (replace draw with mill+return)\n- Wheel effects (discard hand, draw new)","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-32","title":"Discard mechanics beyond cleanup step","description":"Extend discard beyond cleanup step:\n- Targeted discard (Duress, Thoughtseize)\n- Random discard (Hymn to Tourach)\n- Player chooses which cards to discard\n- Madness triggers on discard\n- Discard as cost for spells/abilities","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-33","title":"Graveyard interactions (flashback, recursion)","description":"Graveyard as a resource:\n- Flashback (cast from graveyard)\n- Recursion (return cards from graveyard to hand/battlefield)\n- Delve (exile from graveyard as cost reduction)\n- Threshold/Delirium (graveyard counting)\n- Escape mechanic","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-34","title":"Token creation","description":"Create token permanents:\n- Token definition system\n- Token creation effects (A:SP$ Token)\n- Token characteristics (P/T, types, abilities)\n- Tokens cease to exist when leaving battlefield\n- Copy tokens (Clone effects)","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-35","title":"+1/+1 and -1/-1 counters on creatures","description":"Implement +1/+1 and -1/-1 counter mechanics:\n- Place counters on creatures\n- Counter annihilation (+1/+1 and -1/-1 cancel)\n- Effects that count counters\n- Proliferate/remove counter effects\n- Persist/Undying mechanics","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-36","title":"GameState text file format (.pzl files)","description":"Define text format for saving/loading game states:\n- Human-readable format\n- Include all zones (hand, library order, battlefield, graveyard, exile)\n- Player life totals and counters\n- Turn/phase information\n- Stack contents\nUse for testing and puzzle setup.","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-37","title":"Load game states from files for testing","description":"Implement loader for .pzl game state files:\n- Parse text format into GameState\n- Validate loaded state for consistency\n- Use in unit tests for complex scenarios\n- CLI command to load and display state","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-38","title":"Puzzle mode for testing specific scenarios","description":"Interactive puzzle mode:\n- Load game state from file\n- Present player with scenario (\"Win this turn\", \"Survive\", etc.)\n- Let player make moves\n- Check victory conditions\n- Educational tool and test framework","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-39","title":"Replay recorded games from file","description":"Record and replay games:\n- Save sequence of player choices to file\n- Replay file to recreate game\n- Useful for debugging non-determinism\n- Regression testing for rule changes\n- Share interesting games","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-4","title":"Gameplay features: TUI, human play, controls","description":"Track user-facing gameplay features and interaction improvements.\n\n**TUI (Terminal User Interface):**\n- Current: ✅  command with --p1/--p2 agent types (zero/random), --seed for deterministic games\n- mtg-25: Interactive TUI controller (--p1=tui) for human play\n- mtg-26: Display game state during play (life, hand, battlefield)\n- mtg-27: Show available actions to player\n- mtg-28: Better formatting and colors in output\n- mtg-29: Game state visualization improvements\n\n**Advanced gameplay mechanics:**\n- mtg-30: Stack interaction (responding to spells at instant speed)\n- mtg-31: Card draw triggers and replacement effects\n- mtg-32: Discard mechanics beyond cleanup step\n- mtg-33: Graveyard interactions (flashback, recursion)\n- mtg-34: Token creation\n- mtg-35: +1/+1 and -1/-1 counters on creatures\n\n**Serialization \u0026 Testing:**\n- mtg-36: GameState text file format (.pzl files)\n- mtg-37: Load game states from files for testing\n- mtg-38: Puzzle mode for testing specific scenarios\n- mtg-39: Replay recorded games from file","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-40","title":"Migrate game loop from v1 to v2 controller interface","description":"Complete migration to v2 controller architecture:\n- Game loop currently uses v1 interface\n- v2 provides better zero-copy patterns (SmallVec, slices)\n- v2 has specific callbacks (choose_land_to_play, choose_spell_to_cast, etc.)\n- See CONTROLLER_DESIGN.md for architecture details","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-41","title":"Controller API consistency and documentation","description":"Ensure controller API is consistent and well-documented:\n- Uniform naming conventions\n- Clear separation of concerns\n- Document contract between game loop and controllers\n- Examples for each controller type","status":"open","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-42","title":"Improve test coverage for edge cases","description":"Expand unit tests to cover edge cases:\n- Interaction between multiple keywords\n- Complex combat scenarios\n- Stack interaction corner cases\n- Zone transfer edge cases\nTarget \u003e80% code coverage.","status":"open","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-43","title":"Integration test suite expansion","description":"Add more integration tests:\n- Multi-turn game scenarios\n- Complex deck interactions\n- Performance regression tests\n- Cross-module integration points","status":"open","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-44","title":"Determinism testing for more complex scenarios","description":"Extend determinism tests:\n- Complex random scenarios with seed\n- Multi-thousand game consistency checks\n- Verify undo/redo produces same state\n- Catch floating-point non-determinism","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-45","title":"Property-based testing with proptest","description":"Add property-based tests using proptest crate:\n- Generate random game states\n- Verify invariants hold\n- Fuzz testing for parser\n- Automated shrinking for bug reproduction","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-46","title":"Undo/redo performance testing","description":"Benchmark undo/redo system:\n- Measure overhead of undo logging\n- Test undo performance at different depths\n- Compare with baseline (no undo)\n- Optimize undo log compaction","status":"open","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-47","title":"Board state evaluation function","description":"Implement heuristic board evaluation:\n- Material count (creature P/T, card advantage)\n- Life total differential\n- Board position (attacking vs defending)\n- Mana advantage\n- Card quality weighting\nFoundation for tree search AI.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-48","title":"Tree search using undo log","description":"Implement game tree search:\n- Use undo log to explore branches\n- Efficient state rewind without cloning\n- Depth-limited search\n- Alpha-beta pruning\n- Transposition tables","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-49","title":"MCTS or minimax search implementation","description":"Advanced search algorithms:\n- Monte Carlo Tree Search (MCTS) for high branching factor\n- Minimax with alpha-beta for tactical positions\n- UCB1 selection policy\n- Parallelizable search\n- Configurable time budget","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-5","title":"Cross-cutting codebase issues: APIs, testing, architecture","description":"Track architectural improvements, API design, and testing infrastructure.\n\n**Controller architecture:**\n- Current: Two-layer controller architecture (v2) documented in CONTROLLER_DESIGN.md\n  - PlayerController trait with specific callbacks\n  - DecisionMaker with generic choices\n  - RandomControllerV2 and ZeroControllerV2 with zero-copy patterns (SmallVec, slices)\n- mtg-40: Migrate game loop from v1 to v2 controller interface\n- mtg-41: Controller API consistency and documentation\n\n**Testing infrastructure:**\n- Current: 188 passing tests (165 lib + 10 card_loading + 4 determinism + 7 tui + 2 undo)\n- mtg-42: Improve test coverage for edge cases\n- mtg-43: Integration test suite expansion\n- mtg-44: Determinism testing for more complex scenarios\n- mtg-45: Property-based testing with proptest\n\n**Performance \u0026 Tree Search (Phase 4):**\n- mtg-46: Undo/redo performance testing\n- mtg-47: Board state evaluation function\n- mtg-48: Tree search using undo log\n- mtg-49: MCTS or minimax search implementation\n- mtg-50: Measure boardstates-per-second\n\n**Serialization:**\n- mtg-51: Fast binary game snapshots (rkyv)\n- mtg-52: Parallel game search capabilities\n- mtg-53: SIMD optimizations where applicable","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-50","title":"Measure boardstates-per-second","description":"Performance metric for AI search:\n- Benchmark states expanded per second\n- Include undo/redo overhead\n- Compare different search strategies\n- Target \u003e100k states/sec for real-time play","status":"open","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-51","title":"Fast binary game snapshots (rkyv)","description":"Zero-copy binary serialization with rkyv:\n- Instant deserialization (no parsing)\n- Save/load game states efficiently\n- Use for transposition tables\n- Network play synchronization","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-52","title":"Parallel game search capabilities","description":"Multi-threaded tree search:\n- Parallel MCTS (root or leaf parallelization)\n- Thread-safe game state cloning\n- Work-stealing scheduler\n- Utilize all CPU cores","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-53","title":"SIMD optimizations where applicable","description":"SIMD for performance hotspots:\n- Bulk mana calculations\n- Combat damage assignment\n- State evaluation vectorization\n- Use portable_simd or explicit platform intrinsics","status":"open","priority":4,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-54","title":"Improve error messages in card loader","description":"When cards fail to load from the cardsfolder, the error messages should be more descriptive.\n\nCurrent behavior: Generic \"failed to load card\" message\nDesired behavior: Show which field failed to parse, line number, and suggested fix\n\nThis will save debugging time when adding new cards.\n\n\nAdd profile command to CLI","status":"open","priority":4,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-55","title":"Improve error messages in card loader","description":"When cards fail to load from the cardsfolder, the error messages should be more descriptive.\n\nCurrent behavior: Generic \"failed to load card\" message\nDesired behavior: Show which field failed to parse, line number, and suggested fix\n\nThis will save debugging time when adding new cards.\n\n\nAdd profile command to CLI","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T10:15:17.274684829Z"}
{"id":"mtg-56","title":"Improve error messages in card loader","description":"When cards fail to load from the cardsfolder, the error messages should be more descriptive.\n\nCurrent behavior: Generic \"failed to load card\" message\nDesired behavior: Show which field failed to parse, line number, and suggested fix\n\nThis will save debugging time when adding new cards.\n\n\nAdd profile command to CLI","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T10:15:17.294086716Z"}
{"id":"mtg-57","title":"Improve error messages in card loader","description":"When cards fail to load from the cardsfolder, the error messages should be more descriptive.\nCurrent behavior: Generic \"failed to load card\" message\nDesired behavior: Show which field failed to parse, line number, and suggested fix\nThis will save debugging time when adding new cards.\nAdd profile command to CLI\nAdd a `profile` subcommand that runs heaptrack profiling automatically.\nShould:\n- Run a configurable number of games\n- Generate heaptrack output\n- Automatically analyze results\n- Print top allocation sites\nExample: `mtg profile --games 1000 --seed 42`\nDocument the mana engine API\nThe ManaEngine is complex and needs better documentation.\nAdd:\n- Module-level docs explaining the architecture\n- Examples of common use cases\n- Diagram showing interaction with GameState\n- Performance characteristics and optimization notes\nTarget audience: contributors implementing new card effects.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T10:15:52.010689547Z"}
{"id":"mtg-58","title":"Improve error messages in card loader","description":"When cards fail to load from the cardsfolder, the error messages should be more descriptive.\n\nCurrent behavior: Generic \"failed to load card\" message\nDesired behavior: Show which field failed to parse, line number, and suggested fix\n\nThis will save debugging time when adding new cards.\n\n","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T10:15:17.298828845Z"}
{"id":"mtg-59","title":"Improve error messages in card loader","description":"When cards fail to load from the cardsfolder, the error messages should be more descriptive.\n\nCurrent behavior: Generic \"failed to load card\" message\nDesired behavior: Show which field failed to parse, line number, and suggested fix\n\nThis will save debugging time when adding new cards.\n\n","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T10:15:17.304699296Z"}
{"id":"mtg-6","title":"Logging allocations are #1 hotspot (70%+ of allocations)","description":"String formatting in logging dominates allocations. \n- 77,378 calls in Combat.clear() (src/game/game_loop.rs:819)\n- 45,274 calls in draw card logging (src/game/game_loop.rs:517) \n- 43,437 calls in discard logging (src/game/game_loop.rs:863)\n\nSolutions to consider:\n1. Use tracing crate with zero-cost disabled spans\n2. Implement string interning for repeated messages\n3. Add compile-time feature flag to disable logging\n4. Use Cow\u003c'static, str\u003e for common log messages\n5. Pre-allocate string buffers and reuse them\n\nDiscovered from heap profiling at commit#162(387498cecf).","status":"closed","priority":3,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-23T09:52:38.609790703Z"}
{"id":"mtg-60","title":"Add profile command to CLI","description":"Add a `profile` subcommand that runs heaptrack profiling automatically.\n\nShould:\n- Run a configurable number of games\n- Generate heaptrack output\n- Automatically analyze results\n- Print top allocation sites\n\nExample: `mtg profile --games 1000 --seed 42`","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T23:20:24.160618696Z"}
{"id":"mtg-61","title":"Document the mana engine API","description":"The ManaEngine is complex and needs better documentation.\n\nAdd:\n- Module-level docs explaining the architecture\n- Examples of common use cases\n- Diagram showing interaction with GameState\n- Performance characteristics and optimization notes\n\nTarget audience: contributors implementing new card effects.","status":"open","priority":4,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-62","title":"Overall MTG Forge Rust development tracking","description":"This is the main tracking issue for MTG Forge Rust development.\n\n**Major tracking issues (priority 1):**\n- mtg-2: Optimization and performance tracking\n- mtg-3: MTG feature completeness (keywords, abilities, effects)\n- mtg-4: Gameplay features (TUI, human play, controls)\n- mtg-5: Cross-cutting codebase issues (APIs, testing, architecture)\n\n**Current status as of commit#179(b6bee0df):**\n- Tests: 192 passing (169 lib + 10 card_loading + 4 determinism + 7 tui + 2 undo)\n- Examples: 13/13 passing\n- Performance (fresh mode): ~6,214 games/sec, ~7.96M actions/sec\n- Performance (snapshot mode): ~7,726 games/sec, ~9.90M actions/sec\n- Cards: 31k+ supported from cardsfolder\n\n**Conventions:**\n- Tracking issues (priority 1) reference granular issues\n- Granular issues have priority 3-4 unless critical bugs (priority 2)\n- Human-created issues have priority 0\n- Reference issues in code: // TODO(mtg-N): description\n- Transient info includes timestamp: commit#N(hash)\n\nChecked up-to-date as of 2025-10-24.","status":"closed","priority":0,"issue_type":"epic","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T20:45:32.987277409-04:00"}
{"id":"mtg-63","title":"Optimization and performance tracking","description":"Track performance optimization work for MTG Forge Rust.\n\n**Current performance as of commit#179(b6bee0df):**\n\n*Fresh Mode (seed 42):*\n- Games/sec: ~6,214\n- Actions/sec: ~7,960,611\n- Turns/sec: ~546,864\n- Actions/turn: 14.56\n- Avg bytes/game: 267,082\n- Bytes/turn: 3,035\n- Avg duration/game: 160.92µs\n\n*Snapshot Mode (seed 42):*\n- Games/sec: ~7,726\n- Actions/sec: ~9,896,970\n- Turns/sec: ~679,885\n- Actions/turn: 14.56\n- Avg bytes/game: 164,610\n- Bytes/turn: 1,870\n- Avg duration/game: 129.43µs\n\n**Completed optimizations:**\n- ✓ mtg-6: Logging allocations (conditional compilation)\n- ✓ mtg-10: Vec reallocations (fixed arrays + SmallVec)\n\n**High priority open issues:**\n- mtg-7: CardDatabase.get_card() should return references\n- mtg-8: Eliminate GameStateView clones\n- mtg-9: String allocation optimization\n\n**Medium priority:**\n- mtg-11: Zone transfer operations optimization\n- mtg-12: Mana pool calculation optimization\n\n**Future considerations:**\n- mtg-13: Arena allocation for per-turn temporaries\n- mtg-14: Object pools for reusable objects\n- mtg-15: Compile-time feature flags for profiling modes\n\nSee OPTIMIZATION.md for detailed analysis and profiling methodology.\n\nChecked up-to-date as of 2025-10-24.","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T20:46:04.619499534-04:00"}
{"id":"mtg-64","title":"Cross-cutting codebase issues: APIs, testing, architecture","description":"Track architectural improvements, API design, and testing infrastructure.\n\n**Controller architecture:**\n- Current: PlayerController trait with unified choose_spell_ability_to_play() method\n  - Documented in CONTROLLER_DESIGN.md and src/game/controller.rs\n  - Implementations: RandomController, ZeroController\n  - Uses zero-copy patterns (SmallVec, slices, GameStateView borrows)\n- mtg-40: Migrate game loop from v1 to v2 controller interface\n- mtg-41: Controller API consistency and documentation\n\n**Testing infrastructure:**\n- Current: 192 passing tests (169 lib + 10 card_loading + 4 determinism + 7 tui + 2 undo)\n- mtg-42: Improve test coverage for edge cases\n- mtg-43: Integration test suite expansion\n- mtg-44: Determinism testing for more complex scenarios\n- mtg-45: Property-based testing with proptest\n\n**Performance \u0026 Tree Search (Phase 4):**\n- mtg-46: Undo/redo performance testing\n- mtg-47: Board state evaluation function\n- mtg-48: Tree search using undo log\n- mtg-49: MCTS or minimax search implementation\n- mtg-50: Measure boardstates-per-second\n\n**Serialization:**\n- mtg-51: Fast binary game snapshots (rkyv)\n- mtg-52: Parallel game search capabilities\n- mtg-53: SIMD optimizations where applicable\n\nChecked up-to-date as of 2025-10-24.","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","closed_at":"2025-10-24T20:46:23.560523039-04:00"}
{"id":"mtg-65","title":"Need ask the choice oracle ALL questions","description":"Right now, all the code that follows this line in actions.rs is misguided:\n\n    // Fill in missing targets for effects\n\nThe idea is that the choice agent, such as the random agent, should be\nmaking ALL choices.  There should be no auto-targetting of spells or\nplaceholder targets.  When we need targets, we need to ask the agent\nto produce them. We do, however, need to filter the valid targets to\npresent valid options to the agent.\n\nThis will be a large task, but you can get started by incrementally\nshifting choices from this \"auto-targetting\" code over to correct\nchoices by the agent.  We can run games with the random agent to test\nchanges and observe which choices are asked of the agent.\n\n","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00","labels":["human"]}
{"id":"mtg-66","title":"Begin or progress work on simple interactive TUI","description":"The basic `mtg tui --p1=tui` will be very similar to the Java version. Instead\nof making a random choice for every `Enter choice (0-N)` prompt, we will present\nthe choice to the user and wait for input on stdin.\n\nLater we will add a fancy TUI with the ratatui library, so we should keep an eye\non how to make our Controller interface generic. It will present the battlefield\nand the choices in a different way.\n\n## Status: COMPLETED\n\nImplemented InteractiveController in src/game/interactive_controller.rs.\nSupports all 8 core decision methods with simple stdin/stdout interface.\nCLI now accepts --p1 interactive and --p2 interactive flags.\nAll tests passing.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-25T21:03:07.354429212Z","updated_at":"2025-10-25T21:25:09.067047Z","closed_at":"2025-10-25T21:25:09.067063Z","labels":["human"]}
{"id":"mtg-67","title":"First Test Issue","description":"This is the first test issue with some description.\nMultiple lines are supported.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-25T21:03:30.97102567Z","updated_at":"2025-10-25T21:03:51.223743395Z","closed_at":"2025-10-25T21:03:51.223743395Z","labels":["human"]}
{"id":"mtg-68","title":"Second Test Issue","description":"This is the second test issue.\nIt uses dashes instead of equals.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-25T21:03:31.013148826Z","updated_at":"2025-10-25T21:03:51.234025529Z","closed_at":"2025-10-25T21:03:51.234025529Z","labels":["human"]}
{"id":"mtg-69","title":"Third Test Issue","description":"And here's a third one for good measure.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-25T21:03:31.023924875Z","updated_at":"2025-10-25T21:03:51.242234961Z","closed_at":"2025-10-25T21:03:51.242234961Z","labels":["human"]}
{"id":"mtg-7","title":"CardDatabase.get_card() should return references instead of cloning","description":"Currently clones CardDefinition on every access (database_async.rs:52).\nHeaptrack shows this as top allocation site.\n\nRequires adding lifetime parameters to return \u0026CardDefinition.\nWould eliminate ~50% of Card struct clones.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-70","title":"Implement targeting for activated abilities","description":"Implement targeting for activated abilities\n\n## Summary\nImplemented full targeting support for activated abilities like Royal Assassin's '{T}: Destroy target tapped creature' ability.\n\n## Implementation\n1. **Added get_valid_targets_for_ability() in src/game/actions.rs (lines 434-574)**\n   - Parses ability description to detect targeting restrictions ('tapped', 'untapped', 'creature')\n   - Filters battlefield cards based on restrictions\n   - Checks shroud/hexproof protection\n   - Returns SmallVec of valid target CardIds\n\n2. **Updated ActivateAbility handler in src/game/game_loop.rs (lines 1425-1559)**\n   - Calls get_valid_targets_for_ability() before paying costs\n   - Asks controller to choose targets if valid targets exist\n   - Replaces placeholder targets (CardId(0)) with chosen targets\n   - Handles DestroyPermanent, TapPermanent, UntapPermanent, PumpCreature effects\n\n3. **Added target validation to get_activatable_abilities() (lines 1902-1927)**\n   - Checks if ability requires targets (description contains 'target')\n   - Only returns ability if valid targets are available\n   - Prevents activating targeting abilities with no legal targets\n\n4. **Fixed attacker tapping in declare_attackers_step() (line 815)**\n   - Changed from Combat::declare_attacker() to GameState::declare_attacker()\n   - Ensures attacking creatures are properly tapped (MTG Rules 508.1f)\n\n## Test Results\nRoyal Assassin test (test_royal_assassin_with_log_capture) now passes:\n- ✅ Royal Assassin activates when Grizzly Bears attacks and becomes tapped\n- ✅ Royal Assassin targets and destroys Grizzly Bears\n- ✅ Grizzly Bears ends up in graveyard\n- ✅ No damage dealt (creature destroyed before combat damage)\n\nResult: P2 creatures before: 1, after: 0, Grizzly Bears in graveyard: 1\n\n## MTG Rules Implemented\n- MTG Rules 508.1f: Attacking creatures become tapped\n- MTG Rules 508.4: Priority after attackers declared\n- Target restriction parsing for activated abilities\n- Shroud/Hexproof targeting protection","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-26T09:55:39.455310765Z","updated_at":"2025-10-26T10:02:39.318276677Z","closed_at":"2025-10-26T10:02:39.318276677Z"}
{"id":"mtg-71","title":"Heuristic AI completeness tracking","description":"Track completion of heuristic AI port from Java Forge to Rust.\n\n## Current Status\n\n**What's Implemented in HeuristicController:**\n- ✅ Creature evaluation (comprehensive, faithful port)\n- ✅ Attack decisions with aggression levels (basic - needs improvement)\n- ✅ Block decisions with value trading\n- ✅ Basic targeting (best creature)\n- ✅ Basic spell selection (creatures first)\n- ✅ GameStateEvaluator (basic holistic board evaluation)\n- ✅ Opponent life access (vc-6 completed)\n\n**What's Missing:**\n\n### High Priority (Core AI Strength):\n\n1. **Attack logic improvements (workspace-2)**\n   - Current: Only evaluates attacker stats in isolation\n   - Missing: Board state evaluation, combat math, blockability checks\n   - Reference: Java's SpellAbilityFactors class in AiAttackController.java:1350-1562\n   - Impact: 2/2 vanilla creatures never attack even with no blockers\n\n2. **GameStateEvaluator improvements:**\n   - vc-2: Port evalManaBase() - mana base quality scoring\n   - vc-3: Track summon sickness properly\n   - vc-5: Complete land evaluation (detailed heuristics)\n\n3. **Combat outcome prediction**\n   - Simulate combat before making decisions\n   - Critical for knowing if attacks will be lethal\n   - Reference: GameStateEvaluator.java:40-67, 91-100\n\n### Medium Priority:\n\n4. **Spell evaluation** - Beyond creatures\n   - Removal spell targeting (ComputerUtilCard)\n   - Card draw value assessment\n   - Pump spells, combat tricks\n\n5. **Mana tapping order** - ComputerUtilMana\n   - Leave up correct colors for instant responses\n   - Optimize painland/fetchland usage\n\n### Lower Priority:\n\n6. **Damage assignment order** - Kill blockers efficiently\n7. **Bluffing/deception** - Hold information when advantageous\n8. vc-4: Improve enchantment evaluation\n\n## Completed Work\n\n- ✅ Basic GameStateEvaluator with hand, life, and battlefield evaluation\n- ✅ Creature evaluation (faithful port from Java)\n- ✅ Basic land evaluation\n- ✅ Score type with summon sickness tracking\n- ✅ Opponent life access (vc-6) - GameStateView now provides player_life(), opponents(), and opponent_life() methods\n- ✅ Activated ability targeting (mtg-70) - Royal Assassin can now target and destroy tapped creatures\n","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-26T03:49:16.308864025-07:00","updated_at":"2025-10-26T03:49:16.308864025-07:00"}
{"id":"mtg-72","title":"Heuristic AI completeness tracking","description":"Track completion of heuristic AI port from Java Forge to Rust.\n\n## Current Status\n\n**What's Implemented in HeuristicController:**\n- ✅ Creature evaluation (comprehensive, faithful port)\n- ✅ Attack decisions with aggression levels (basic - needs improvement)\n- ✅ Block decisions with value trading\n- ✅ Basic targeting (best creature)\n- ✅ Basic spell selection (creatures first)\n- ✅ GameStateEvaluator (basic holistic board evaluation)\n- ✅ Opponent life access (vc-6 completed)\n\n**What's Missing:**\n\n### High Priority (Core AI Strength):\n\n1. **Attack logic improvements (workspace-2)**\n   - Current: Only evaluates attacker stats in isolation\n   - Missing: Board state evaluation, combat math, blockability checks\n   - Reference: Java's SpellAbilityFactors class in AiAttackController.java:1350-1562\n   - Impact: 2/2 vanilla creatures never attack even with no blockers\n\n2. **GameStateEvaluator improvements:**\n   - vc-2: Port evalManaBase() - mana base quality scoring\n   - vc-3: Track summon sickness properly\n   - vc-5: Complete land evaluation (detailed heuristics)\n\n3. **Combat outcome prediction**\n   - Simulate combat before making decisions\n   - Critical for knowing if attacks will be lethal\n   - Reference: GameStateEvaluator.java:40-67, 91-100\n\n### Medium Priority:\n\n4. **Spell evaluation** - Beyond creatures\n   - Removal spell targeting (ComputerUtilCard)\n   - Card draw value assessment\n   - Pump spells, combat tricks\n\n5. **Mana tapping order** - ComputerUtilMana\n   - Leave up correct colors for instant responses\n   - Optimize painland/fetchland usage\n\n### Lower Priority:\n\n6. **Damage assignment order** - Kill blockers efficiently\n7. **Bluffing/deception** - Hold information when advantageous\n8. vc-4: Improve enchantment evaluation\n\n## Completed Work\n\n- ✅ Basic GameStateEvaluator with hand, life, and battlefield evaluation\n- ✅ Creature evaluation (faithful port from Java)\n- ✅ Basic land evaluation\n- ✅ Score type with summon sickness tracking\n- ✅ Opponent life access (vc-6) - GameStateView now provides player_life(), opponents(), and opponent_life() methods\n- ✅ Activated ability targeting (mtg-70) - Royal Assassin can now target and destroy tapped creatures\n","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-26T10:58:47.853405439Z","updated_at":"2025-10-26T10:58:47.853405439Z"}
{"id":"mtg-73","title":"Heuristic AI completeness tracking","description":"Track completion of heuristic AI port from Java Forge to Rust.\n\n## Current Status\n\n**What's Implemented in HeuristicController:**\n- ✅ Creature evaluation (comprehensive, faithful port)\n- ✅ Attack decisions with aggression levels (basic - needs improvement)\n- ✅ Block decisions with value trading\n- ✅ Basic targeting (best creature)\n- ✅ Basic spell selection (creatures first)\n- ✅ GameStateEvaluator (basic holistic board evaluation)\n- ✅ Opponent life access (vc-6 completed)\n\n**What's Missing:**\n\n### High Priority (Core AI Strength):\n\n1. **Attack logic improvements (workspace-2)**\n   - Current: Only evaluates attacker stats in isolation\n   - Missing: Board state evaluation, combat math, blockability checks\n   - Reference: Java's SpellAbilityFactors class in AiAttackController.java:1350-1562\n   - Impact: 2/2 vanilla creatures never attack even with no blockers\n\n2. **GameStateEvaluator improvements:**\n   - vc-2: Port evalManaBase() - mana base quality scoring\n   - vc-3: Track summon sickness properly\n   - vc-5: Complete land evaluation (detailed heuristics)\n\n3. **Combat outcome prediction**\n   - Simulate combat before making decisions\n   - Critical for knowing if attacks will be lethal\n   - Reference: GameStateEvaluator.java:40-67, 91-100\n\n### Medium Priority:\n\n4. **Spell evaluation** - Beyond creatures\n   - Removal spell targeting (ComputerUtilCard)\n   - Card draw value assessment\n   - Pump spells, combat tricks\n\n5. **Mana tapping order** - ComputerUtilMana\n   - Leave up correct colors for instant responses\n   - Optimize painland/fetchland usage\n\n### Lower Priority:\n\n6. **Damage assignment order** - Kill blockers efficiently\n7. **Bluffing/deception** - Hold information when advantageous\n8. vc-4: Improve enchantment evaluation\n\n## Completed Work\n\n- ✅ Basic GameStateEvaluator with hand, life, and battlefield evaluation\n- ✅ Creature evaluation (faithful port from Java)\n- ✅ Basic land evaluation\n- ✅ Score type with summon sickness tracking\n- ✅ Opponent life access (vc-6) - GameStateView now provides player_life(), opponents(), and opponent_life() methods\n- ✅ Activated ability targeting (mtg-70) - Royal Assassin can now target and destroy tapped creatures\n","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-26T11:04:09.959989727Z","updated_at":"2025-10-26T11:04:09.959989727Z"}
{"id":"mtg-74","title":"Heuristic AI completeness tracking","description":"Track completion of heuristic AI port from Java Forge to Rust.\n\n## Current Status\n\n**What's Implemented in HeuristicController:**\n- ✅ Creature evaluation (comprehensive, faithful port)\n- ✅ Attack decisions with aggression levels (basic - needs improvement)\n- ✅ Block decisions with value trading\n- ✅ Basic targeting (best creature)\n- ✅ Basic spell selection (creatures first)\n- ✅ GameStateEvaluator (basic holistic board evaluation)\n- ✅ Opponent life access (vc-6 completed)\n\n**What's Missing:**\n\n### High Priority (Core AI Strength):\n\n1. **Attack logic improvements (workspace-2)**\n   - Current: Only evaluates attacker stats in isolation\n   - Missing: Board state evaluation, combat math, blockability checks\n   - Reference: Java's SpellAbilityFactors class in AiAttackController.java:1350-1562\n   - Impact: 2/2 vanilla creatures never attack even with no blockers\n\n2. **GameStateEvaluator improvements:**\n   - vc-2: Port evalManaBase() - mana base quality scoring\n   - vc-3: Track summon sickness properly\n   - vc-5: Complete land evaluation (detailed heuristics)\n\n3. **Combat outcome prediction**\n   - Simulate combat before making decisions\n   - Critical for knowing if attacks will be lethal\n   - Reference: GameStateEvaluator.java:40-67, 91-100\n\n### Medium Priority:\n\n4. **Spell evaluation** - Beyond creatures\n   - Removal spell targeting (ComputerUtilCard)\n   - Card draw value assessment\n   - Pump spells, combat tricks\n\n5. **Mana tapping order** - ComputerUtilMana\n   - Leave up correct colors for instant responses\n   - Optimize painland/fetchland usage\n\n### Lower Priority:\n\n6. **Damage assignment order** - Kill blockers efficiently\n7. **Bluffing/deception** - Hold information when advantageous\n8. vc-4: Improve enchantment evaluation\n\n## Completed Work\n\n- ✅ Basic GameStateEvaluator with hand, life, and battlefield evaluation\n- ✅ Creature evaluation (faithful port from Java)\n- ✅ Basic land evaluation\n- ✅ Score type with summon sickness tracking\n- ✅ Opponent life access (vc-6) - GameStateView now provides player_life(), opponents(), and opponent_life() methods\n- ✅ Activated ability targeting (mtg-70) - Royal Assassin can now target and destroy tapped creatures\n","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-26T11:11:36.45115015Z","updated_at":"2025-10-26T11:11:36.45115015Z"}
{"id":"mtg-75","title":"Heuristic AI completeness tracking","description":"Track completion of heuristic AI port from Java Forge to Rust.\n\n## Current Status\n\n**What's Implemented in HeuristicController:**\n- ✅ Creature evaluation (comprehensive, faithful port)\n- ✅ Attack decisions with aggression levels (basic - needs improvement)\n- ✅ Block decisions with value trading\n- ✅ Basic targeting (best creature)\n- ✅ Basic spell selection (creatures first)\n- ✅ GameStateEvaluator (basic holistic board evaluation)\n- ✅ Opponent life access (vc-6 completed)\n\n**What's Missing:**\n\n### High Priority (Core AI Strength):\n\n1. **Attack logic improvements (workspace-2)**\n   - Current: Only evaluates attacker stats in isolation\n   - Missing: Board state evaluation, combat math, blockability checks\n   - Reference: Java's SpellAbilityFactors class in AiAttackController.java:1350-1562\n   - Impact: 2/2 vanilla creatures never attack even with no blockers\n\n2. **GameStateEvaluator improvements:**\n   - vc-2: Port evalManaBase() - mana base quality scoring\n   - vc-3: Track summon sickness properly\n   - vc-5: Complete land evaluation (detailed heuristics)\n\n3. **Combat outcome prediction**\n   - Simulate combat before making decisions\n   - Critical for knowing if attacks will be lethal\n   - Reference: GameStateEvaluator.java:40-67, 91-100\n\n### Medium Priority:\n\n4. **Spell evaluation** - Beyond creatures\n   - Removal spell targeting (ComputerUtilCard)\n   - Card draw value assessment\n   - Pump spells, combat tricks\n\n5. **Mana tapping order** - ComputerUtilMana\n   - Leave up correct colors for instant responses\n   - Optimize painland/fetchland usage\n\n### Lower Priority:\n\n6. **Damage assignment order** - Kill blockers efficiently\n7. **Bluffing/deception** - Hold information when advantageous\n8. vc-4: Improve enchantment evaluation\n\n## Completed Work\n\n- ✅ Basic GameStateEvaluator with hand, life, and battlefield evaluation\n- ✅ Creature evaluation (faithful port from Java)\n- ✅ Basic land evaluation\n- ✅ Score type with summon sickness tracking\n- ✅ Opponent life access (vc-6) - GameStateView now provides player_life(), opponents(), and opponent_life() methods\n- ✅ Activated ability targeting (mtg-70) - Royal Assassin can now target and destroy tapped creatures\n","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-26T11:17:19.029190802Z","updated_at":"2025-10-26T11:17:19.029190802Z"}
{"id":"mtg-8","title":"Eliminate GameStateView clones","description":"Created on every controller decision.\nConsider borrowing instead of cloning where possible.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"mtg-9","title":"String allocation optimization","description":"Card names, player names cloned frequently.\nConsider using Arc\u003cstr\u003e or \u0026'static str where appropriate.","status":"open","priority":4,"issue_type":"chore","created_at":"2025-10-24T22:08:03.55473635-04:00","updated_at":"2025-10-24T22:08:03.55473635-04:00"}
{"id":"vc-1","title":"Heuristic AI completeness tracking","description":"Track completion of heuristic AI port from Java Forge to Rust.\n\n## Current Status\n\n**What's Implemented in HeuristicController:**\n- ✅ Creature evaluation (comprehensive, faithful port)\n- ✅ Attack decisions with aggression levels\n- ✅ Block decisions with value trading\n- ✅ Basic targeting (best creature)\n- ✅ Basic spell selection (creatures first)\n- ✅ GameStateEvaluator (basic holistic board evaluation)\n\n**What's Missing:**\n\n### High Priority (Core AI Strength):\n\n1. **GameStateEvaluator improvements:**\n   - vc-2: Port evalManaBase() - mana base quality scoring\n   - vc-3: Track summon sickness properly\n   - vc-5: Complete land evaluation (detailed heuristics)\n   - vc-6: Add opponent life access to GameStateView\n\n2. **Combat outcome prediction**\n   - Simulate combat before making decisions\n   - Critical for knowing if attacks will be lethal\n   - Reference: GameStateEvaluator.java:40-67, 91-100\n\n### Medium Priority:\n\n3. **Spell evaluation** - Beyond creatures\n   - Removal spell targeting (ComputerUtilCard)\n   - Card draw value assessment\n   - Pump spells, combat tricks\n\n4. **Mana tapping order** - ComputerUtilMana\n   - Leave up correct colors for instant responses\n   - Optimize painland/fetchland usage\n\n### Lower Priority:\n\n5. **Damage assignment order** - Kill blockers efficiently\n6. **Bluffing/deception** - Hold information when advantageous\n7. vc-4: Improve enchantment evaluation\n\n## Completed Work\n\n- ✅ Basic GameStateEvaluator with hand, life, and battlefield evaluation\n- ✅ Creature evaluation (faithful port from Java)\n- ✅ Basic land evaluation\n- ✅ Score type with summon sickness tracking","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-26T08:21:44.089378511Z","updated_at":"2025-10-26T08:28:01.956753471Z"}
{"id":"vc-2","title":"Port evalManaBase() to GameStateEvaluator","description":"Port the evalManaBase() function from Java to Rust GameStateEvaluator.\n\nReference: GameStateEvaluator.java:176-216\n\nThe function evaluates mana base quality by:\n- Counting available mana sources by color\n- Comparing against deck's color requirements (maxPips)\n- Comparing total mana against deck's max CMC\n- Value: +100 per color pip up to deck needs\n- Value: +100 per total mana source up to max CMC\n- Value: +5 per excess mana beyond deck needs\n\nRequires:\n- Access to player's lands and mana abilities\n- Deck statistics (max pips by color, max CMC)\n- Mana ability parsing to determine colors produced","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-26T08:26:58.81157785Z","updated_at":"2025-10-26T08:26:58.81157785Z"}
{"id":"vc-3","title":"Track summon sickness in GameStateEvaluator","description":"Properly track summon sickness when evaluating game states.\n\nReference: GameStateEvaluator.java:146-173\n\nThe evaluator should maintain two scores:\n1. Full score: includes all creatures\n2. Summon sick score: excludes value from summon sick creatures\n\nThis encourages the AI to hold creatures until Main Phase 2 if they provide no immediate value (can't attack yet).\n\nImplementation:\n- Check if creature is sick (entered battlefield this turn)\n- Check if game phase is before MAIN2\n- If both true, don't add creature value to summon_sick_score\n- Use turn_entered_battlefield field on Card","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-26T08:27:25.332611033Z","updated_at":"2025-10-26T08:27:25.332611033Z"}
{"id":"vc-4","title":"Improve enchantment evaluation in GameStateEvaluator","description":"Properly evaluate enchantments based on what they're enchanting.\n\nReference: GameStateEvaluator.java:224-228\n\nCurrently enchantments have 0 value. Java comment says:\n\"Should only provide value based on what it's enchanting. Else the AI would think that casting a Lifelink enchantment on something that already has lifelink is a net win.\"\n\nThis requires:\n- Tracking what permanents enchantments are attached to\n- Evaluating the enchantment's effect on the enchanted permanent\n- Not double-counting abilities already present","status":"open","priority":4,"issue_type":"task","created_at":"2025-10-26T08:27:30.460385747Z","updated_at":"2025-10-26T08:27:30.460385747Z"}
{"id":"vc-5","title":"Complete land evaluation in GameStateEvaluator","description":"Implement detailed land evaluation heuristics.\n\nReference: GameStateEvaluator.java:240-285\n\nCurrently uses a simple heuristic. Should implement:\n- +100 per mana the land can produce\n- +3 per color of mana produced\n- +25 for manlands (activated abilities without tap cost)\n- +10 for sac abilities (not repeatable)\n- +50 for repeatable utility abilities (tap cost)\n- +6 per static ability\n\nRequires parsing mana abilities to determine:\n- How much mana produced\n- What colors produced\n- Cost to activate","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-26T08:27:35.604341723Z","updated_at":"2025-10-26T08:27:35.604341723Z"}
{"id":"vc-6","title":"Add opponent life access to GameStateView","description":"Add method to GameStateView to get opponent life totals.\n\nCurrently GameStateEvaluator uses a hardcoded placeholder (20 life) for opponent life.\n\nNeed to add:\n- GameStateView::opponent_life(opponent_id: PlayerId) -\u003e i32\n- Or: GameStateView::opponents() -\u003e Iterator\u003cPlayerId\u003e\n- Support for multiplayer (multiple opponents)\n\nThis allows proper life total evaluation in game states.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-26T08:27:40.732919989Z","updated_at":"2025-10-26T08:27:40.732919989Z"}
{"id":"vc-7","title":"Implement targeting for activated abilities","description":"Royal Assassin test reveals that activated abilities don't support targeting yet.\n\nCurrent status:\n- ✅ Priority during combat works (MTG Rules 508.4)\n- ✅ Royal Assassin's ability is loaded from card database\n- ✅ get_activatable_abilities() correctly finds the ability\n- ✅ HeuristicController.choose_best_spell() now considers activated abilities\n- ❌ Activated abilities use placeholder targets instead of asking controller to choose\n\nWhat needs to be implemented:\n1. In game_loop.rs ActivateAbility handler (line ~1425):\n   - Get valid targets for the activated ability\n   - Ask controller to choose targets (similar to spell targeting)\n   - Replace placeholder targets in effects with chosen targets\n   \n2. Add get_valid_targets_for_ability() method to GameState\n   - Similar to get_valid_targets_for_spell()\n   - For Royal Assassin: filter for tapped creatures\n   \n3. Test with Royal Assassin scenario:\n   - Royal Assassin should target Grizzly Bears (tapped attacker)\n   - Grizzly Bears should be destroyed\n   - Test should verify Bears in graveyard\n\nTest file: tests/puzzle_e2e.rs::test_royal_assassin_with_log_capture","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-26T09:46:20.471523431Z","updated_at":"2025-10-26T09:46:20.471523431Z"}
{"id":"workspace-1","title":"HeuristicController attack logic missing board state evaluation","description":"## Problem\n\nThe HeuristicController's `should_attack()` method only evaluates the attacker's stats in isolation, ignoring the opponent's board state entirely. This causes creatures to be too conservative - e.g., 2/2 vanilla creatures never attack even when the opponent has no blockers.\n\n## Root Cause\n\nOur Rust implementation is not faithful to Java Forge's attack logic.\n\n**Current Rust logic** (src/game/heuristic_controller.rs:442-454):\n```rust\n// Aggression level 3 (balanced)\nhas_evasion || (power \u003e= 2 \u0026\u0026 keywords) || power \u003e= 3\n```\n\n**Java Forge logic** (AiAttackController.java:1535-1543):\n```java\ncase 3: // expecting to at least kill a creature of equal value or not be blocked\n    if ((saf.canKillAll \u0026\u0026 saf.isWorthLessThanAllKillers)\n            || (((saf.dangerousBlockersPresent \u0026\u0026 saf.canKillAllDangerous)\n                || saf.hasAttackEffect || saf.hasCombatEffect) \u0026\u0026 !saf.canBeKilledByOne)\n            || !saf.canBeBlocked()) {\n        return true;\n    }\n```\n\n## What's Missing\n\nThe Java AI evaluates:\n1. **Board state** - Available blockers and their stats\n2. **Combat math** - Can kill all blockers? Will survive?\n3. **Value comparison** - Creature evaluation scores\n4. **Blockability** - Can opponent block this creature at all?\n\nWe're missing ~90% of Java's attack decision logic.\n\n## Evidence\n\nTest game log (AI_VALIDATION_LOG.md):\n- Grizzly Bears (2/2, no keywords) never attacked\n- Opponent had NO blockers for many turns\n- Serra Angels attacked correctly (flying = evasion)\n\n## Fix Requirements\n\nImplement equivalent of Java's `SpellAbilityFactors` class:\n1. Evaluate available blockers from GameStateView\n2. Calculate combat math (can_kill_all, can_be_killed, etc.)\n3. Compare creature values (attacker vs blockers)\n4. Check blockability (CombatUtil.canBeBlocked equivalent)\n5. Use these factors in aggression-based attack decisions\n\n## References\n\n- Java: `forge-java/forge-ai/src/main/java/forge/ai/AiAttackController.java:1350-1562`\n- Rust: `src/game/heuristic_controller.rs:388-468`\n- Test log: `AI_VALIDATION_LOG.md`\n","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-26T01:03:01.943841703Z","updated_at":"2025-10-26T01:11:38.59592549Z","closed_at":"2025-10-26T01:11:38.59592549Z"}
{"id":"workspace-2","title":"HeuristicController attack logic missing board state evaluation","description":"## Problem\n\nThe HeuristicController's `should_attack()` method only evaluates the attacker's stats in isolation, ignoring the opponent's board state entirely. This causes creatures to be too conservative - e.g., 2/2 vanilla creatures never attack even when the opponent has no blockers.\n\n## Root Cause\n\nOur Rust implementation is not faithful to Java Forge's attack logic.\n\n**Current Rust logic** (src/game/heuristic_controller.rs:442-454):\n```rust\n// Aggression level 3 (balanced)\nhas_evasion || (power \u003e= 2 \u0026\u0026 keywords) || power \u003e= 3\n```\n\n**Java Forge logic** (AiAttackController.java:1535-1543):\n```java\ncase 3: // expecting to at least kill a creature of equal value or not be blocked\n    if ((saf.canKillAll \u0026\u0026 saf.isWorthLessThanAllKillers)\n            || (((saf.dangerousBlockersPresent \u0026\u0026 saf.canKillAllDangerous)\n                || saf.hasAttackEffect || saf.hasCombatEffect) \u0026\u0026 !saf.canBeKilledByOne)\n            || !saf.canBeBlocked()) {\n        return true;\n    }\n```\n\n## What's Missing\n\nThe Java AI evaluates:\n1. **Board state** - Available blockers and their stats\n2. **Combat math** - Can kill all blockers? Will survive?\n3. **Value comparison** - Creature evaluation scores\n4. **Blockability** - Can opponent block this creature at all?\n\nWe're missing ~90% of Java's attack decision logic.\n\n## Evidence\n\nTest game log (AI_VALIDATION_LOG.md):\n- Grizzly Bears (2/2, no keywords) never attacked\n- Opponent had NO blockers for many turns\n- Serra Angels attacked correctly (flying = evasion)\n\n## Fix Requirements\n\nImplement equivalent of Java's `SpellAbilityFactors` class:\n1. Evaluate available blockers from GameStateView\n2. Calculate combat math (can_kill_all, can_be_killed, etc.)\n3. Compare creature values (attacker vs blockers)\n4. Check blockability (CombatUtil.canBeBlocked equivalent)\n5. Use these factors in aggression-based attack decisions\n\n## References\n\n- Java: `forge-java/forge-ai/src/main/java/forge/ai/AiAttackController.java:1350-1562`\n- Rust: `src/game/heuristic_controller.rs:388-468`\n- Test log: `AI_VALIDATION_LOG.md`\n","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-26T01:11:33.407525242Z","updated_at":"2025-10-26T01:11:33.407525242Z"}
